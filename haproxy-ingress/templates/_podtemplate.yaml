{{- define "haproxy-ingress.controller.podTemplate" -}}
metadata:
  annotations:
{{- if .Values.controller.template }}
    checksum/config: {{ include (print $.Template.BasePath "/controller-template.yaml") . | sha256sum }}
{{- end }}
{{- if .Values.controller.podAnnotations }}
    {{- toYaml .Values.controller.podAnnotations | nindent 4 }}
{{- end }}
  labels:
    {{- include "haproxy-ingress.selectorLabels" . | nindent 4 }}
{{- if .Values.controller.podLabels }}
    {{- toYaml .Values.controller.podLabels | nindent 4 }}
{{- end }}
spec:
{{- if .Values.controller.podAffinity }}
  affinity:
    {{- toYaml .Values.controller.podAffinity | nindent 4 }}
{{- end }}
  serviceAccountName: {{ include "haproxy-ingress.serviceAccountName" . }}
{{- if or .Values.controller.haproxy.enabled .Values.controller.initContainers }}
  initContainers:
{{- if .Values.controller.haproxy.enabled }}
    - name: haproxy-ingress-init
      image:  "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
      imagePullPolicy: "{{ .Values.controller.image.pullPolicy }}"
      args:
        - --init
      resources:
        limits:
          cpu: 10m
          memory: 32Mi
        requests:
          cpu: 10m
          memory: 32Mi
      volumeMounts:
        - mountPath: /etc/haproxy
          name: etc
{{- end }}
{{- if .Values.controller.initContainers }}
    {{- toYaml .Values.controller.initContainers | nindent 4 }}
{{- end }}
{{- end }}
  containers:
    - name: haproxy-ingress
      image:  "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
      imagePullPolicy: "{{ .Values.controller.image.pullPolicy }}"
      args:
        - --configmap={{ .Release.Namespace }}/{{ include "haproxy-ingress.fullname" . }}
        - --ingress-class={{ .Values.controller.ingressClass }}
{{- if .Values.controller.haproxy.enabled }}
        - --master-socket=/var/run/haproxy/master.sock
{{- end }}
        - --sort-backends
{{- if .Values.controller.tcp }}
        - --tcp-services-configmap={{ .Release.Namespace }}/{{ include "haproxy-ingress.fullname" . }}-tcp
{{- end }}
{{- if or .Values.defaultBackend.enabled .Values.controller.defaultBackendService }}
        - --default-backend-service={{ if .Values.defaultBackend.enabled }}{{ .Release.Namespace }}/{{ include "haproxy-ingress.defaultBackend.fullname" . }}{{ else }}{{ .Values.controller.defaultBackendService }}{{ end }}
{{- end }}
{{- range $key, $value := .Values.controller.extraArgs }}
  {{- if $value }}
        - --{{ $key }}={{ $value }}
  {{- else }}
        - --{{ $key }}
  {{- end }}
{{- end }}
{{- if or (not .Values.controller.haproxy.enabled) .Values.controller.metrics.enabled }}
      ports:
  {{- if not .Values.controller.haproxy.enabled }}
        {{- include "haproxy-ingress.controller.ports" . | indent 8 }}
  {{- end }}
  {{- if .Values.controller.metrics.enabled }}
        - name: ctrl-metrics
          containerPort: {{ .Values.controller.metrics.controllerPort }}
          protocol: TCP
  {{- end }}
{{- end }}
{{- if not .Values.controller.haproxy.enabled }}
      {{- include "haproxy-ingress.controller.probes" . | indent 6 }}
{{- end }}
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
{{- if .Values.controller.extraEnvs }}
        {{- toYaml .Values.controller.extraEnvs | nindent 8 }}
{{- end }}
{{- if or .Values.controller.haproxy.enabled .Values.controller.template .Values.controller.extraVolumeMounts }}
      volumeMounts:
{{- if .Values.controller.haproxy.enabled }}
        - mountPath: /etc/haproxy
          name: etc
        - mountPath: /var/lib/haproxy
          name: lib
        - mountPath: /var/run/haproxy
          name: run
{{- end }}
{{- if .Values.controller.template }}
        - name: haproxy-template
          mountPath: /etc/templates/haproxy
{{- end }}
{{- if .Values.controller.extraVolumeMounts }}
        {{- toYaml .Values.controller.extraVolumeMounts | nindent 8 }}
{{- end }}
{{- end }}
      resources:
        {{- toYaml .Values.controller.resources | nindent 8 }}
{{- if .Values.controller.haproxy.enabled }}
    - name: haproxy
      image: "{{ .Values.controller.haproxy.image.repository }}:{{ .Values.controller.haproxy.image.tag }}"
      imagePullPolicy: "{{ .Values.controller.haproxy.image.pullPolicy }}"
      args:
        - -W
        - -S
        - /var/run/haproxy/master.sock,mode,600
        - -f
        - /etc/haproxy
  {{- range $key, $value := .Values.controller.haproxy.extraArgs }}
    {{- if $value }}
        - --{{ $key }}={{ $value }}
    {{- else }}
        - --{{ $key }}
    {{- end }}
  {{- end }}
      ports:
        {{- include "haproxy-ingress.controller.ports" . | indent 8 }}
      {{- include "haproxy-ingress.controller.probes" . | indent 6 }}
      resources:
        {{- toYaml .Values.controller.haproxy.resources | nindent 8 }}
      volumeMounts:
        - mountPath: /etc/haproxy
          name: etc
        - mountPath: /var/lib/haproxy
          name: lib
        - mountPath: /var/run/haproxy
          name: run
{{- if .Values.controller.extraVolumeMounts }}
        {{- toYaml .Values.controller.extraVolumeMounts | nindent 8 }}
{{- end }}
{{- end }}
{{- if .Values.controller.logs.enabled }}
    - name: access-logs
      image:  "{{ .Values.controller.logs.image.repository }}:{{ .Values.controller.logs.image.tag }}"
      imagePullPolicy: "{{ .Values.controller.logs.image.pullPolicy }}"
      ports:
        - name: udp
          containerPort: 514
          protocol: UDP
      resources:
        {{- toYaml .Values.controller.logs.resources | nindent 8 }}
{{- end }}
{{- if and .Values.controller.stats.enabled .Values.controller.metrics.enabled (not .Values.controller.metrics.embedded) }}
    - name: prometheus-exporter
      image:  "{{ .Values.controller.metrics.image.repository }}:{{ .Values.controller.metrics.image.tag }}"
      imagePullPolicy: "{{ .Values.controller.metrics.image.pullPolicy }}"
      args:
        - '--haproxy.scrape-uri=http://localhost:{{ .Values.controller.stats.port }}/haproxy?stats;csv'
        - --web.listen-address=:{{ .Values.controller.metrics.port }}
  {{- range $key, $value := .Values.controller.metrics.extraArgs }}
    {{- if $value }}
        - --{{ $key }}={{ $value }}
    {{- else }}
        - --{{ $key }}
    {{- end }}
  {{- end }}
      ports:
        - name: metrics
          containerPort: {{ .Values.controller.metrics.port }}
          protocol: TCP
      livenessProbe:
        httpGet:
          path: /
          port: metrics
      resources:
        {{- toYaml .Values.controller.metrics.resources | nindent 8 }}
{{- end }}
{{- if .Values.controller.imagePullSecrets }}
  imagePullSecrets:
    {{- toYaml .Values.controller.imagePullSecrets | nindent 4 }}
{{- end }}
{{- if or .Values.controller.haproxy.enabled .Values.controller.template .Values.controller.extraVolumes }}
  volumes:
{{- if .Values.controller.haproxy.enabled }}
    - name: etc
      emptyDir: {}
    - name: lib
      emptyDir: {}
    - name: run
      emptyDir: {}
{{- end }}
{{- if .Values.controller.template }}
    - name: haproxy-template
      configMap:
        name: {{ include "haproxy-ingress.fullname" . }}-template
{{- end }}
{{- if .Values.controller.extraVolumes }}
    {{- toYaml .Values.controller.extraVolumes | nindent 4 }}
{{- end }}
{{- end }}
  terminationGracePeriodSeconds: {{ .Values.controller.terminationGracePeriodSeconds }}
  dnsPolicy: {{ .Values.controller.dnsPolicy }}
  hostNetwork: {{ .Values.controller.hostNetwork }}
{{- if .Values.controller.nodeSelector }}
  nodeSelector:
    {{- toYaml .Values.controller.nodeSelector | nindent 4 }}
{{- end }}
{{- if .Values.controller.tolerations }}
  tolerations:
    {{- toYaml .Values.controller.tolerations | nindent 4 }}
{{- end }}
{{- if .Values.controller.affinity }}
  affinity:
    {{- toYaml .Values.controller.affinity | nindent 4 }}
{{- end }}
{{- if .Values.controller.priorityClassName }}
  priorityClassName: {{ .Values.controller.priorityClassName | quote }}
{{- end }}
{{- if .Values.controller.securityContext }}
  securityContext:
    {{- toYaml .Values.controller.securityContext | nindent 4 }}
{{- end }}
{{- end }}

{{- define "haproxy-ingress.controller.ports" }}
{{- if .Values.controller.enableStaticPorts }}
- name: http
  containerPort: 80
  {{- if and (eq .Values.controller.kind "DaemonSet") .Values.controller.daemonset.useHostPort .Values.controller.daemonset.hostPorts.http }}
  hostPort: {{ .Values.controller.daemonset.hostPorts.http }}
  {{- end }}
- name: https
  containerPort: 443
  {{- if and (eq .Values.controller.kind "DaemonSet") .Values.controller.daemonset.useHostPort .Values.controller.daemonset.hostPorts.https }}
  hostPort: {{ .Values.controller.daemonset.hostPorts.https }}
  {{- end }}
{{- end }}
{{- if and .Values.controller.metrics.enabled .Values.controller.metrics.embedded }}
- name: metrics
  containerPort: {{ .Values.controller.metrics.port }}
  protocol: TCP
{{- end }}
{{- if .Values.controller.stats.enabled }}
- name: stats
  containerPort: {{ .Values.controller.stats.port }}
  protocol: TCP
{{- end }}
- name: healthz
  containerPort: {{ .Values.controller.healthzPort }}
{{- range $key, $value := .Values.controller.tcp }}
- name: "{{ $key }}-tcp"
  containerPort: {{ $key }}
  protocol: TCP
  {{- if and (eq $.Values.controller.kind "DaemonSet") $.Values.controller.daemonset.useHostPort }}
    {{- range $p := $.Values.controller.daemonset.hostPorts.tcp }}
      {{- if eq $key $p }}
  hostPort: {{ $key }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}

{{- define "haproxy-ingress.controller.probes" }}
livenessProbe:
  httpGet:
    path: {{ .Values.controller.livenessProbe.path | quote }}
    port: {{ .Values.controller.livenessProbe.port }}
    scheme: HTTP
  initialDelaySeconds: {{ .Values.controller.livenessProbe.initialDelaySeconds }}
  periodSeconds: {{ .Values.controller.livenessProbe.periodSeconds }}
  timeoutSeconds: {{ .Values.controller.livenessProbe.timeoutSeconds }}
  successThreshold: {{ .Values.controller.livenessProbe.successThreshold }}
  failureThreshold: {{ .Values.controller.livenessProbe.failureThreshold }}
readinessProbe:
  httpGet:
    path: {{ .Values.controller.readinessProbe.path | quote }}
    port: {{ .Values.controller.readinessProbe.port }}
    scheme: HTTP
  initialDelaySeconds: {{ .Values.controller.readinessProbe.initialDelaySeconds }}
  periodSeconds: {{ .Values.controller.readinessProbe.periodSeconds }}
  timeoutSeconds: {{ .Values.controller.readinessProbe.timeoutSeconds }}
  successThreshold: {{ .Values.controller.readinessProbe.successThreshold }}
  failureThreshold: {{ .Values.controller.readinessProbe.failureThreshold }}
{{- end }}
